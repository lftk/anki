syntax = "proto3";

package pb;

option go_package = "github.com/lftk/anki/pb";

message StockNotetype {
  enum OriginalStockKind {
    ORIGINAL_STOCK_KIND_UNKNOWN = 0;
    ORIGINAL_STOCK_KIND_BASIC = 1;
    ORIGINAL_STOCK_KIND_BASIC_AND_REVERSED = 2;
    ORIGINAL_STOCK_KIND_BASIC_OPTIONAL_REVERSED = 3;
    ORIGINAL_STOCK_KIND_BASIC_TYPING = 4;
    ORIGINAL_STOCK_KIND_CLOZE = 5;
    ORIGINAL_STOCK_KIND_IMAGE_OCCLUSION = 6;
  }
}

message NotetypeConfig {
  enum Kind {
    KIND_NORMAL = 0;
    KIND_CLOZE = 1;
  }
  message CardRequirement {
    enum Kind {
      KIND_NONE = 0;
      KIND_ANY = 1;
      KIND_ALL = 2;
    }
    uint32 card_ord = 1;
    Kind kind = 2;
    repeated uint32 field_ords = 3;
  }

  Kind kind = 1;
  uint32 sort_field_idx = 2;
  string css = 3;
  int64 target_deck_id_unused = 4;
  string latex_pre = 5;
  string latex_post = 6;
  bool latex_svg = 7;
  repeated CardRequirement reqs = 8;
  StockNotetype.OriginalStockKind original_stock_kind = 9;
  optional int64 original_id = 10;

  bytes other = 255;
}

message FieldConfig {
  bool sticky = 1;
  bool rtl = 2;
  string font_name = 3;
  uint32 font_size = 4;
  string description = 5;
  bool plain_text = 6;
  bool collapsed = 7;
  bool exclude_from_search = 8;
  optional int64 id = 9;
  optional uint32 tag = 10;
  bool prevent_deletion = 11;

  bytes other = 255;
}

message TemplateConfig {
  string q_format = 1;
  string a_format = 2;
  string q_format_browser = 3;
  string a_format_browser = 4;
  int64 target_deck_id = 5;
  string browser_font_name = 6;
  uint32 browser_font_size = 7;
  optional int64 id = 8;

  bytes other = 255;
}

message DeckConfig {
  enum NewCardInsertOrder {
    NEW_CARD_INSERT_ORDER_DUE = 0;
    NEW_CARD_INSERT_ORDER_RANDOM = 1;
  }
  enum NewCardGatherPriority {
    // Decks in alphabetical order (preorder), then ascending position.
    // Siblings are consecutive, provided they have the same position.
    NEW_CARD_GATHER_PRIORITY_DECK = 0;
    // Notes are randomly picked from each deck in alphabetical order.
    // Siblings are consecutive, provided they have the same position.
    NEW_CARD_GATHER_PRIORITY_DECK_THEN_RANDOM_NOTES = 5;
    // Ascending position.
    // Siblings are consecutive, provided they have the same position.
    NEW_CARD_GATHER_PRIORITY_LOWEST_POSITION = 1;
    // Descending position.
    // Siblings are consecutive, provided they have the same position.
    NEW_CARD_GATHER_PRIORITY_HIGHEST_POSITION = 2;
    // Siblings are consecutive.
    NEW_CARD_GATHER_PRIORITY_RANDOM_NOTES = 3;
    // Siblings are neither grouped nor ordered.
    NEW_CARD_GATHER_PRIORITY_RANDOM_CARDS = 4;
  }
  enum NewCardSortOrder {
    // Ascending card template ordinal.
    // For a given ordinal, cards appear in gather order.
    NEW_CARD_SORT_ORDER_TEMPLATE = 0;
    // Preserves original gather order (eg deck order).
    NEW_CARD_SORT_ORDER_NO_SORT = 1;
    // Ascending card template ordinal.
    // For a given ordinal, cards appear in random order.
    NEW_CARD_SORT_ORDER_TEMPLATE_THEN_RANDOM = 2;
    // Random note order. For a given note, cards appear in template order.
    NEW_CARD_SORT_ORDER_RANDOM_NOTE_THEN_TEMPLATE = 3;
    // Fully randomized order.
    NEW_CARD_SORT_ORDER_RANDOM_CARD = 4;
  }
  enum ReviewCardOrder {
    REVIEW_CARD_ORDER_DAY = 0;
    REVIEW_CARD_ORDER_DAY_THEN_DECK = 1;
    REVIEW_CARD_ORDER_DECK_THEN_DAY = 2;
    REVIEW_CARD_ORDER_INTERVALS_ASCENDING = 3;
    REVIEW_CARD_ORDER_INTERVALS_DESCENDING = 4;
    REVIEW_CARD_ORDER_EASE_ASCENDING = 5;
    REVIEW_CARD_ORDER_EASE_DESCENDING = 6;
    REVIEW_CARD_ORDER_RETRIEVABILITY_ASCENDING = 7;
    REVIEW_CARD_ORDER_RETRIEVABILITY_DESCENDING = 11;
    REVIEW_CARD_ORDER_RANDOM = 8;
    REVIEW_CARD_ORDER_ADDED = 9;
    REVIEW_CARD_ORDER_REVERSE_ADDED = 10;
  }
  enum ReviewMix {
    REVIEW_MIX_MIX_WITH_REVIEWS = 0;
    REVIEW_MIX_AFTER_REVIEWS = 1;
    REVIEW_MIX_BEFORE_REVIEWS = 2;
  }
  enum LeechAction {
    LEECH_ACTION_SUSPEND = 0;
    LEECH_ACTION_TAG_ONLY = 1;
  }
  enum AnswerAction {
    ANSWER_ACTION_BURY_CARD = 0;
    ANSWER_ACTION_ANSWER_AGAIN = 1;
    ANSWER_ACTION_ANSWER_GOOD = 2;
    ANSWER_ACTION_ANSWER_HARD = 3;
    ANSWER_ACTION_SHOW_REMINDER = 4;
  }
  enum QuestionAction {
    QUESTION_ACTION_SHOW_ANSWER = 0;
    QUESTION_ACTION_SHOW_REMINDER = 1;
  }
  repeated float learn_steps = 1;
  repeated float relearn_steps = 2;

  repeated float fsrs_params_4 = 3;
  repeated float fsrs_params_5 = 5;
  repeated float fsrs_params_6 = 6;

  // consider saving remaining ones for fsrs param changes
  reserved 7 to 8;

  uint32 new_per_day = 9;
  uint32 reviews_per_day = 10;

  // not currently used
  uint32 new_per_day_minimum = 35;

  float initial_ease = 11;
  float easy_multiplier = 12;
  float hard_multiplier = 13;
  float lapse_multiplier = 14;
  float interval_multiplier = 15;

  uint32 maximum_review_interval = 16;
  uint32 minimum_lapse_interval = 17;

  uint32 graduating_interval_good = 18;
  uint32 graduating_interval_easy = 19;

  NewCardInsertOrder new_card_insert_order = 20;
  NewCardGatherPriority new_card_gather_priority = 34;
  NewCardSortOrder new_card_sort_order = 32;
  ReviewMix new_mix = 30;

  ReviewCardOrder review_order = 33;

  ReviewMix interday_learning_mix = 31;

  LeechAction leech_action = 21;
  uint32 leech_threshold = 22;

  bool disable_autoplay = 23;
  uint32 cap_answer_time_to_secs = 24;
  bool show_timer = 25;
  bool stop_timer_on_answer = 38;
  float seconds_to_show_question = 41;
  float seconds_to_show_answer = 42;
  QuestionAction question_action = 36;
  AnswerAction answer_action = 43;
  bool wait_for_audio = 44;
  bool skip_question_when_replaying_answer = 26;

  bool bury_new = 27;
  bool bury_reviews = 28;
  bool bury_interday_learning = 29;

  // for fsrs
  float desired_retention = 37;
  string ignore_revlogs_before_date = 46;
  repeated float easy_days_percentages = 4;
  // used for fsrs_reschedule in the past
  reserved 39;
  float historical_retention = 40;
  string param_search = 45;

  bytes other = 255;
}

message DeckCommon {
  bool study_collapsed = 1;
  bool browser_collapsed = 2;

  uint32 last_day_studied = 3;
  int32 new_studied = 4;
  int32 review_studied = 5;
  int32 milliseconds_studied = 7;

  // previously set in the v1 scheduler,
  // but not currently used for anything
  int32 learning_studied = 6;

  reserved 8 to 13;

  bytes other = 255;
}

message DeckNormal {
  message DayLimit {
    uint32 limit = 1;
    uint32 today = 2;
  }
  int64 config_id = 1;
  uint32 extend_new = 2;
  uint32 extend_review = 3;
  string description = 4;
  bool markdown_description = 5;
  optional uint32 review_limit = 6;
  optional uint32 new_limit = 7;
  DayLimit review_limit_today = 8;
  DayLimit new_limit_today = 9;

  reserved 12 to 15;
}

message DeckFiltered {
  message SearchTerm {
    enum Order {
      OLDEST_REVIEWED_FIRST = 0;
      RANDOM = 1;
      INTERVALS_ASCENDING = 2;
      INTERVALS_DESCENDING = 3;
      LAPSES = 4;
      ADDED = 5;
      DUE = 6;
      REVERSE_ADDED = 7;
      RETRIEVABILITY_ASCENDING = 8;
      RETRIEVABILITY_DESCENDING = 9;
    }

    string search = 1;
    uint32 limit = 2;
    Order order = 3;
  }

  bool reschedule = 1;
  repeated SearchTerm search_terms = 2;
  // v1 scheduler only
  repeated float delays = 3;
  // v2 and old v3 scheduler only
  uint32 preview_delay = 4;
  // recent v3 scheduler only; 0 means card will be returned
  uint32 preview_again_secs = 7;
  // recent v3 scheduler only; 0 means card will be returned
  uint32 preview_hard_secs = 5;
  // recent v3 scheduler only; 0 means card will be returned
  uint32 preview_good_secs = 6;
}

message DeckKind {
  oneof kind {
    DeckNormal normal = 1;
    DeckFiltered filtered = 2;
  }
}

message PackageMetadata {
  enum Version {
    VERSION_UNKNOWN = 0;
    VERSION_LEGACY_1 = 1;
    VERSION_LEGACY_2 = 2;
    VERSION_LATEST = 3;
  }

  Version version = 1;
}

message MediaEntries {
  message MediaEntry {
    string name = 1;
    uint32 size = 2;
    bytes sha1 = 3;
    optional uint32 legacy_zip_filename = 255;
  }

  repeated MediaEntry entries = 1;
}